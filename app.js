require("dotenv").config(); // ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å .env file
const { Client, GatewayIntentBits, PermissionsBitField } = require('discord.js');
const mongoose = require('mongoose');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB
mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('Failed to connect to MongoDB:', err));

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Schema ‡πÅ‡∏•‡∏∞ Model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡πâ‡∏≠‡∏á
const roomSchema = new mongoose.Schema({
    channelId: String,
    guildId: String,
    createdAt: { type: Date, default: Date.now },
});

const Room = mongoose.model('Room', roomSchema);

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMembers,
    ],
});

const categoryId = '1326556877533876234'; // ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á VC
const trackChannelId = '1351063389958438944'; // Channel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°

const roleIdCanJoin = ['1326557080227676161']; // Role ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ
const roleIdCanSpeak = ['1333874999928295445', '1326557938873012306']; // Role ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏π‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ
const userLimit = 10; // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
const roomType = 2; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ Voice channel
const roomName = 'üü¢„ÉªLive '; // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á

client.once('ready', () => {
    console.log('üü¢ Bot is online!');
});

client.on('voiceStateUpdate', async (oldState, newState) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á VC ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    if (newState.channelId === trackChannelId && !oldState.channelId) {
        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á VC ‡πÉ‡∏´‡∏°‡πà
            const guild = await client.guilds.fetch(newState.guild.id);
            const category = await guild.channels.fetch(categoryId);

            const newChannel = await guild.channels.create({
                name: `${roomName}${newState.member.displayName}`, // ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
                type: roomType, // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
                parent: category, // ‡∏ï‡∏±‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                userLimit: userLimit, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
                permissionOverwrites: [
                    ...roleIdCanJoin.map(roleId => ({
                        id: roleId,
                        allow: [PermissionsBitField.Flags.ViewChannel], // ‡πÉ‡∏ä‡πâ PermissionFlags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ViewChannel
                    })),
                    ...roleIdCanSpeak.map(roleId => ({
                        id: roleId,
                        allow: [PermissionsBitField.Flags.Connect, PermissionsBitField.Flags.Speak], // ‡πÉ‡∏ä‡πâ PermissionFlags ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Connect ‡πÅ‡∏•‡∏∞ Speak
                    })),
                ],
            });

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô MongoDB
            const newRoom = new Room({
                channelId: newChannel.id,
                guildId: newState.guild.id,
            });

            await newRoom.save();

            // ‡∏¢‡πâ‡∏≤‡∏¢ user ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            await newState.member.voice.setChannel(newChannel);

            console.log(`Created new VC room: ${newChannel.name}`);

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            await newChannel.send(`‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á **${newChannel.name}** ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`);

        } catch (error) {
            console.error('Error creating VC room:', error);
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ bot ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    if (oldState.channelId && oldState.channelId !== newState.channelId) {
        const room = await Room.findOne({ channelId: oldState.channelId });

        if (room && newState.channelId !== oldState.channelId) {
            try {
                const channel = await client.channels.fetch(oldState.channelId);

                if (channel.members.size === 0) {
                    console.log(`Deleting VC room: ${channel.name}`);
                    // ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
                    await channel.delete();

                    // ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô MongoDB
                    await Room.deleteOne({ channelId: channel.id });
                    console.log(`Deleted room ${channel.name} from database`);
                }
            } catch (error) {
                console.error('Error deleting VC room:', error);
            }
        }
    }
});


// ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Discord ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ bot token ‡∏à‡∏≤‡∏Å .env file
client.login(process.env.DISCORD_BOT_TOKEN);
